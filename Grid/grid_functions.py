#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jun 16 16:43:32 2020

@author: janiceyang
"""

import pandas as pd
import numpy as np
import matplotlib as plt
from tqdm import tqdm
from copy import deepcopy

import sys
sys.path.append('/Users/janiceyang/Dropbox (MIT)/ORC UROP/Opioids/Algorithm/')

from clustering import contradiction, findContradiction, split
from testing import R2_value_training, training_value_error, predict_cluster, \
        testing_value_error, R2_value_testing

#################################################################
# Funtions for Initialization

# defaultNormal() takes as argument n, the number of laws to generate, p the
# dimension of the features, and sigma the correlation matrix
# Return a list of size n of Normal Random Variables of p dimensions
def defaultNormal(n,  # integer: number of observations
                  p=2,  # integer: number of dimensions
                  sigma=[[0.1, 0], [0, 0.1]]):  # array: correlation matrix
    def sample(mu):
        return(lambda: np.random.multivariate_normal(
            p*[mu], sigma))
    return [sample(mu) for mu in range(n)]

def UnifNormal(n,  # integer: number of observations
                  p=2,  # integer: number of dimensions
                  sigma=[[0.1, 0], [0, 0.1]]):  # array: correlation matrix
    def sample(mu):
        return(lambda: np.random.multivariate_normal(
            mu, sigma))
    return np.array([sample([mu1,mu2]) for mu1 in range(int(np.sqrt(n)+1)+1) for mu2 in range(int(np.sqrt(n))+1)])[:n]


# transformSamples() converts samples generated by MDPTools into a dataframe
# with format: ['ID', 'TIME', *Features*, 'ACTION', 'RISK', 'OG_CLUSTER']
def transformSamples(samples,  # array: samples generated by MDPTools
                     pfeatures):  # integer: number of features
    n = len(samples)
    df1 = pd.DataFrame([samples[i][:2] for i in range(n)], columns=[
            'ID', 'TIME'])
    features = np.array([samples[i][2] for i in range(n)])
    df2 = pd.DataFrame(features, columns=['FEATURE_' + str(
            i+1) for i in range(pfeatures)])
    df3 = pd.DataFrame([samples[i][-3:] for i in range(n)], columns=[
            'ACTION', 'RISK', 'OG_CLUSTER'])
    df = pd.concat([df1, df2, df3], sort=False, axis=1)
    return(df)

#################################################################

